

명령어
git status _파일의 변경상태 감지
빨 - 전 

git init _.git 파일 생성
git add .  _모든 파일 선택
git status _초록색 = 올라갈 준비 완

버전 = commit

git commit = 버전 만들기
git commit -m "설명추가"_(m=설명을 다는거)

git log_commit _commit 다 나옴

github 원격저장소 생성
	주소 생김

git remote add origin 주소복붙
origin 별명으로 주소 등록
	git remote -v 주소 제대로 들어갔나 확인
	git push origin main = origin에 밀어넣겠다
 
	*git pull origin main - github에서 파일 내려받는법


tool

+add > commit > push


https://github.com/geoblo/frontend-react-study

ctrl + shift + p > git clone > 내가 받고싶은 git 주소 복붙
  github에서 파일 다운 가능

branch master = main 바꾸는 명령어

*********************
1 [커밋 메세지 룰과 작성법]
첫번째 라인 : 제목(필수)
두번째 라인 : 공란
세번째 라인부터 : 내용작성/무엇을/왜(선택)
마지막 라인 : 꼬리말(#이슈넘버_선택)

작성 팁 : 최대한 구체적으로 작성, 주간 보고 그대로 쓸 정도로 작성

2 [왜 굳이 git add -> commit  두 단계에 걸쳐서 하는지?]
모든 파일을 굳이 다 기록할 필요가 없기때문 
버전을 여러개로 나눠서 만들고 싶은 경우


1. git add로 기록할 파일을 고름

2. git commit으로 버전 생성(기록 완료)

3. 커밋 전에 diff확인하기!(매우 좋은 습관)
  명령어 git diff/git difftool인데 보기 불편함

4. 언제, 얼마나 commit하는게 좋을까?
  간단한 기능을 하나 추가 할 떄 마다 commit 하면 됨

ex)회원가입 기능 만들 때
- 회원 가입 폼 레이아웃 UI를 만들면 commit 
- 입력한 이메일이 맞는지 검증하는 기능(유효성 검사)을 만들었으면 commit
- 서버에 데이터를 전송하는 기능을 만들었으면 commit

대충 이렇게 작은 작업 하나를 마칠때마다 commit하는게 좋음
물론 3개 다 만들고 commit해도 됨
중요한건 하루 1개 이상 커밋 할 것!(좋은 습관)

5. CLI(command line interface)명령창 명령어 기반 VS GUI 툴 비교
  명령어는 모든 기능 사용 가능한 반면 GUI툴은 툴 자체에 구현된 기능만 쓸 수 있음

6. git push -u origin main = -u 옵션은 방금 입력한 주소를 기억해라
  그 다음부터는 주소를 길게 입력하지 않고 git push만 입력해도 됨

7. git remote -v = 원격 저장소 정보를 보고 싶을 때

8. git clone http://원격 저장소 주소
  원격 저장소에 올린 프로젝트를 내 로컬에 복제(1번만 하면 됨)

9. git pull 원격저장소 주소(origin)
  원격 저장소에 있는 모든 브랜치 내용을 가져와서 로컬 저장소에 합치라는 뜻
9-1. git pull origin main = 특정 브랜치(main)만 가져올 수 있음

!! (중요) 작업하기 전에 git pull을 받아서 최신 상태로 만들어 놓고 작업 시작 !!

(참고로) git pull 명령어는 git fetch + git merge 를 합친 것
  git fetch는 원격저장소의 최신 내용(commit)을 받아오는 것
  git merge는 그걸 병합(merge)하라는 뜻

10. 저장소에 올리지 않을 파일들은 .gitignore
  설정 파일이나 빌드 산출물, 기타 라이브러리 파일들 등 불필요한 파일들은 올리지 않는것이 좋음
  .gitignore 파일을 만들어서 올리지 않을 폴더나 파일을 명시하면 됨
  그러면 git에서 해당 폴더랑 파일을 무시함



상대경로
./내 주변 폴더
../상위

절대경로
http 원격 사이트 주소
/ 최상위 경로(root)

이미지 파일 따기
@ F12 > 속성 선택하기 > 원하는 이미지 선택 > 하단 style 로고 클릭 > 링크 들어가서
다른이름으로 저장 > vscode에 images 새 폴더 생성 > 저장한 파일 옮김

@F12 > 속성 선택하기 > 원하는 이미지 선택 > 하단 style 로고 클릭 > 링크 복붙
*블로그 주인이 이미지 없애면 똑같이 없어짐*

<image src="경로 지정" alt="로고">
___alt 안 쓰면 웹 근성 검사에서 빠꾸
