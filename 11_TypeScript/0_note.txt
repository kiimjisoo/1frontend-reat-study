1. 타입스크립트란? (made by 마이크로소프트)
JS는 문법이 매우 유연한 동적 타입 언어(=변수 선언 시 자료형을 정의 할 필요가 없음)

TS는 문법이 매우 엄격한 정적 타입 언어(= 변수 선언 시 자료형을 미리 지정)
TypeScript = JavsScript + Type 문법이 추가 된 JS의 Superset(상위집합 => JS < TS 포함관계)

2. 타입스크립트 쓰는 이유?
1) JS는 매우 유연하고 다른 자료형의 값도 수용할 수 있기 때문에, 코드가 혼란스러워지고 버그 발생하기 쉬움
언뜻 편해보이지만 프로젝트 규모가 복잡하고 커질수록 언어의 유연성은 점점 단점으로 작용
(안돼야 하는데 되어버려서 잠재적 오류 발생 가능성이 올라감)

예)1
JS는 아래 연산이 가능
10 - '5' // JS가 알아서 숫자로 바꾸고 연산

하지만 TS는 타입을 엄격하게 검사함
(정적 타입 언어는 숫자 - 숫자만 가능)
10 - '5' // TS Error발생

예)2
function getUerById(userId) => {
  // 사용자 id를 이용하여 사용자 정보 조회 api 호출
}

함수 선언만 봐서는 어떤 타입의 데이터를 넘겨야 할 지 알 수 없음
함수를 호출하는 다른 코드의 일부를 봐야 명확해짐


하지만 TS를 사용한다면
function getUerById(userId: number) => {
  // 사용자 id를 이용하여 사용자 정보 조회 api 호출
}
userId가 숫자 타입인 것을 알 수 있고, 문자열을 넘겨주면 에러가 발생
함수만 봐도 코드가 명확해짐

2) 엄격한 타입 체크로인한 부가적인 효과
TS는 에러메세지가 디테일하고 자동완성 기능이 강력함

3. 타입 스크립트 설치
npm install -g typeScript
-g: 글로벌 전역 설치

node js 자바스크립트 실행 환경

4. tsconfig.json 작성(타입스크립트 설정)
tsc --init

5. 브라우저 또는 Node는 타입스크립트를 이해하지 못하기 때문에 일반 자바스크립트로 변환해야함
.js 파일로 변환하는 명령어
tsc-w
tsc는 TypeScript Compiler, -w는 watch모드 옵션: 켜두면 저장할때마다 자동 변환됨
일반 자바스크립트로 번역되어 .js 파일이 자동 생성

6. 번역된 js 파일을 열어보면 name: string 코드는 어떻게 됐을까?
자바스크립트는 엄격한 정적 타입 언어가 아니므로 컴파일 과정에서 자료형 선언이 제거됨
이렇게 자료형을 명시하면 디버깅하고 잠재적 오류를 줄이는데 도움이 되고 최종적으로는 동일한 자바스크립트 코드가 생성됨

js 파일에서 ctrl + F5 (run -> run without debugging )
html 파일 만들기
<script src=실행하고싶은 js주소>만들어서 불러오기